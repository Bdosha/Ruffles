from aiogram import Bot, Dispatcher
from aiogram.filters import Text, Command
from aiogram.types import (CallbackQuery, Message)
from aiogram.types import FSInputFile
from aiogram.exceptions import TelegramBadRequest

from datetime import datetime
from sqlite3 import OperationalError
import database
import structure
import asyncio
import re

BOT_TOKEN: str = 'token'

bot: Bot = Bot(token=BOT_TOKEN)
dp: Dispatcher = Dispatcher()

admins = ['', '']
raffles_admin = ['üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π', 'üí∏ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–π']
raffle_user = ['daily_raffle', 'spons_raffle']

DT_format = '%d-%m-%Y %H:%M'
all_chanels = database.all_chanels()

'''
-1 - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ —Å—Ç–∏–º
0 - –Ω–∏—á–µ–≥–æ
1 - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ—Å—Ç
2 - —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–π –ø–æ—Å—Ç
3 - –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ
4 - –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ
5 - –¥–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ
6 - –¥–∞—Ç–∞ –∫–æ–Ω—Ü–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ
7 - —É–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª
8 - —É–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
'''


async def end_raffle(id, type):
    info = database.end_raffle(id, type)
    print(" ".join([str(info[4]), str(info[0]), info[1], info[3]]))
    text = info[2].replace(".", "\.").replace("-", "\.").replace("!", "\!").replace("|", "\|")
    try:
        msg = await bot.send_message(chat_id=info[4],
                                     text=f"–í—ã –≤—ã–π–≥—Ä–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ\!\n\n "
                                          f"{text}\n\n"
                                          f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑\!\n"
                                          f"||{info[1][0]}{info[0]}||",
                                     parse_mode='MarkdownV2',
                                     reply_markup=structure.confirm_win(
                                         f'{" ".join([str(info[4]), str(info[0]), info[1], info[3]])}'))
        await asyncio.sleep(3600)
        await msg.edit_text(text='–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ')
    except:
        return


async def check_start():
    daily = database.get_raffles('daily_raffle')
    spons = database.get_raffles('spons_raffle')

    DT = datetime.now()
    for raffle in daily:
        DT_raffle = datetime.strptime(raffle[2], '%d-%m-%Y %H:%M')
        if DT >= DT_raffle:
            database.start_raffle(raffle[0], 'daily_raffle')
    for raffle in spons:
        DT_raffle = datetime.strptime(raffle[2], '%d-%m-%Y %H:%M')
        if DT >= DT_raffle:

            database.start_raffle(raffle[0], 'spons_raffle')
    await asyncio.sleep(60)
    await check_start()


async def check_end():
    daily = database.get_raffles('active_daily_raffle')
    spons = database.get_raffles('active_spons_raffle')

    DT = datetime.now()
    for raffle in daily:
        if raffle[3] == '–í—Ä—É—á–Ω—É—é':
            continue
        DT_raffle = datetime.strptime(raffle[3], '%d-%m-%Y %H:%M')
        if DT >= DT_raffle:
            await end_raffle(raffle[0], 'daily_raffle')

    for raffle in spons:
        if raffle[3] == '–í—Ä—É—á–Ω—É—é':
            continue
        DT_raffle = datetime.strptime(raffle[3], '%d-%m-%Y %H:%M')
        if DT >= DT_raffle:
            await end_raffle(raffle[0], 'spons_raffle')
    await asyncio.sleep(60)
    await check_end()


@dp.message(Command(commands=['start']))
async def start_command(message: Message):
    print(message.from_user.id)
    print(message.text)
    print(message)
    if message.text.replace('/start', ''):
        refer = message.text.split()[-1]
        if int(refer) != message.from_user.id:
            database.new_refer(message.text.split()[-1])
    if message.from_user.username in admins:
        await message.answer('–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=structure.admin)

        await asyncio.gather(check_start(), check_end())

        return
    if database.start_command(message.from_user.id, message.from_user.username):
        if not database.get(message.from_user.id, 'steam', 'user_info'):
            await message.answer(text="—É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±–º–µ–Ω Steam")
            database.set_using_bot(message.from_user.id, -1)
            return
        await message.answer(text='–ü–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                             reply_markup=structure.user)
        return
    await message.answer(text='—á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥–≤—É—Ö –¥—Ä—É–∑–µ–π\n'
                              f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/Bdosha_testbot?start={message.from_user.id}')


@dp.message(Text(text='üí∏ –î–ª—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤'))
async def sub_help(message: Message):
    await message.answer('–ü—Ä–∞–π—Å–ª–∏—Å—Ç')


@dp.message(Text(text='üéÅ –†–æ–∑—ã–≥—Ä—ã—à–∏'))
async def sub_help(message: Message):
    await message.answer('–≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–æ–∑—ã–≥—Ä—ã—à–∞', reply_markup=structure.raffle_chouse_user)


@dp.callback_query(Text(text='daily_raffle'))
async def sub_sub(callback: CallbackQuery):
    raffles = database.get_raffles('active_daily_raffle')
    await callback.answer()
    keys = structure.key_daily
    if callback.from_user.username in admins:
        keys = structure.end_key_daily
    if not raffles:
        await callback.message.answer(text='–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –Ω–µ—Ç')
        return
    for raffle in raffles:
        text = f'{raffle[1]}\n\n' \
               f'–ò—Ç–æ–≥–∏: {raffle[3].replace("-", ".")}\n\n' \
               f'||d{raffle[0]}||'

        await callback.message.answer_photo(photo=FSInputFile(path=f"daily_raffle\\{raffle[0]}.jpg"),
                                            caption=text.replace(".", "\.").replace("-", "\.").replace("!", "\!").replace("|", "\|"),
                                            parse_mode='MarkdownV2',
                                            reply_markup=keys)


@dp.callback_query(Text(text='spons_raffle'))
async def sub_sub(callback: CallbackQuery):
    raffles = database.get_raffles('active_spons_raffle')
    await callback.answer()
    keys = structure.key_spons
    if callback.from_user.username in admins:
        keys = structure.end_key_spons
    if not raffles:
        await callback.message.answer(text='–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –Ω–µ—Ç')
        return
    for raffle in raffles:
        text = f'{raffle[1]}\n\n' \
               f'–ò—Ç–æ–≥–∏: {raffle[3].replace("-", ".")}\n\n' \
               f'||s{raffle[0]}||'
        await callback.message.answer_photo(photo=FSInputFile(path=f"spons_raffle\\{raffle[0]}.jpg"),
                                            caption=text.replace(".", "\.").replace("-", "\.").replace("!", "\!").replace("|", "\|"),
                                            parse_mode='MarkdownV2',
                                            reply_markup=keys)


@dp.callback_query(lambda callback: 'confirm_win' in callback.data)
async def sub_sub(callback: CallbackQuery):
    info = callback.data.split()[1:]
    print(info)
    if callback.from_user.id != int(info[0]):
        await callback.answer()
        return
    url = database.get(callback.from_user.id, 'steam', 'user_info')
    raffle = database.get_end_raffle(info[1], info[2])
    if not raffle:
        await callback.message.edit_text(text='–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω')
        return
    try:

        await bot.send_message(chat_id=info[3],
                               text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} –≤—ã–∏–≥—Ä–∞–ª –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ {raffle[0][2]}\n\n'
                                    f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–∑ –ø–æ —Å—Å—ã–ª–∫–µ: {url}')
        await callback.message.answer(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–π–≥—Ä—ã—à–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –æ–∂–∏–¥–∞–π—Ç–µ')
    except:
        await callback.message.answer(
            text=f'–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–µ–¥–∞—á–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é: @{database.get(info[3], "username", "user_info")}\n\n'
                 f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} –≤—ã–∏–≥—Ä–∞–ª –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ {raffle[0][2]}\n\n'
                 f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–∑ –ø–æ —Å—Å—ã–ª–∫–µ: {url}'
        )
    database.full_end(info[1], info[2])


@dp.message(Text(text='‚¨ÖÔ∏è –í—ã–π—Ç–∏'))
async def sub_help(message: Message):
    if not message.from_user.username in admins:
        return
    try:
        database.back(message.from_user.id,
                      raffle_user[database.get(message.from_user.id, 'using', 'user_info') % 2 - 1])
    except OperationalError:
        pass
    await message.answer('–≤—ã –≤—ã—à–ª–∏ –≤ –º–µ–Ω—é', reply_markup=structure.admin)


@dp.message(Text(text='üÜï –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à'))
async def sub_help(message: Message):
    if not message.from_user.username in admins:
        return
    try:
        database.back(message.from_user.id,
                      raffle_user[database.get(message.from_user.id, 'using', 'user_info') % 2 - 1])
    except OperationalError:
        database.set_using_bot(message.from_user.id, 0)
    await message.answer('–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤–∏–¥ —Ä–æ–∑—ã–≥—Ä—ã—à–∞', reply_markup=structure.raffle_chouse_admin)


@dp.message(Text(text=raffles_admin))
async def sub_sub(message: Message):
    if not message.from_user.username in admins:
        return
    database.set_using_bot(message.from_user.id, raffles_admin.index(message.text) + 1)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ—Å—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞', reply_markup=structure.back)


@dp.callback_query(Text(text='spons_uch'))
async def sub_sub(callback: CallbackQuery):
    table = callback.message.caption.split('\n')[-1]
    if not table in database.all_tables():
        await callback.answer(text='–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–∫–æ–Ω—á–∏–ª—Å—è', show_alert=True)
        await callback.message.delete()
        return
    channel = database.get(table[1:], 'channel', 'active_spons_raffle')

    try:
        user = await bot.get_chat_member(chat_id=channel, user_id=callback.from_user.id)
    except TelegramBadRequest:
        await callback.answer(text=f'–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel}', show_alert=True)
        return
    if user.status == 'left':
        await callback.answer(text=f'–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel}', show_alert=True)
        return
    if not database.new_member(callback.from_user.id, callback.from_user.username, table):
        await callback.answer(text='–í—ã –£–ñ–ï —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!', show_alert=True)
        return

    await callback.answer(text='–¢–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!', show_alert=True)


@dp.callback_query(Text(text='fake_uch'))
async def sub_sub(callback: CallbackQuery):
    await callback.answer(text='–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ—Å—Ç–∞', show_alert=True)


@dp.callback_query(Text(text='daily_uch'))
async def sub_sub(callback: CallbackQuery):
    table = callback.message.caption.split('\n')[-1]
    if not table in database.all_tables():
        await callback.answer(text='–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–∫–æ–Ω—á–∏–ª—Å—è', show_alert=True)
        await callback.message.delete()
        return
    if not database.new_member(callback.from_user.id, callback.from_user.username, table):
        await callback.answer(text='–í—ã –£–ñ–ï —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!', show_alert=True)
        return
    await callback.answer(text='–¢–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!', show_alert=True)


@dp.callback_query(Text(text=['daily_end', 'spons_end']))
async def sub_sub(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(text='–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω', show_alert=True)

    await end_raffle(callback.message.caption.split('\n')[-1][1:], callback.data.replace('_end', '_raffle'))


@dp.message(lambda message: message.photo and message.caption)  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à
async def handle_photo(message: Message):
    using = database.get(message.from_user.id, 'using', 'user_info')
    if not using in [1, 2] \
            or not message.from_user.username in admins:
        await message.answer(text='–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        return

    post_id = database.set_post(message.from_user.id, message.caption, raffle_user[using - 1])
    photo = message.photo[-1]
    photo_path = f"{raffle_user[using - 1]}\\{post_id}.jpg"

    await bot.download(photo, photo_path)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "dd-mm-yyyy hh:mm"')
    database.set_using_bot(message.from_user.id, using + 2)
    database.set(message.from_user.id, 'post_id', 'user_info', post_id)


@dp.message(lambda message: bool(re.match(structure.datetime_pattern, message.text)))
async def handle_photo(message: Message):
    using = int(database.get(message.from_user.id, 'using', 'user_info'))
    post = database.get(message.from_user.id, 'post_id', 'user_info')
    if not message.from_user.username in admins:
        return
    text = message.text
    if using in [3, 4]:
        print(text)
        print(post, 'begin', raffle_user[using % 2 - 1], text)
        database.set(post, 'begin', raffle_user[using % 2 - 1], text)
        await message.answer(text='–≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å—Ç–∞', reply_markup=structure.chouse_end)
    elif using in [5, 6]:
        database.set(post, 'end', raffle_user[using % 2 - 1], text)
        if using == 5:
            post = database.get_post(post, 'daily_raffle')
            database.set(post[0], 'moder', 'daily_raffle', '95878747')
            database.set(post[0], 'channel', 'daily_raffle', '–ø–∏—Å—è')
            text = [f'–ì–æ—Ç–æ–≤–æ:\n–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω {post[2]}', f'{post[1]}\n\n–ò—Ç–æ–≥–∏:  {post[3]}\n\n||d{post[0]}||']
            await message.answer(text=text[0], reply_markup=structure.admin)
            await message.answer_photo(photo=FSInputFile(path=f"daily_raffle\\{post[0]}.jpg"),
                                       caption=text[1].replace(".", "\.").replace("-", "\.").replace("!", "\!").replace("|", "\|"),
                                       parse_mode='MarkdownV2',
                                       reply_markup=structure.fake_uch)
        else:
            await message.answer(text="—É–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª —Å–ø–æ–Ω—Å–æ—Ä–∞ —á–µ—Ä–µ–∑ @ –∏–ª–∏ —á–µ—Ä–µ–∑ –µ–≥–æ id")
            database.set_using_bot(message.from_user.id, 7)
    else:
        await message.answer(text='–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')


@dp.message(lambda message: 'https://steamcommunity.com/tradeoffer/new/' in message.text)
async def handle_photo(message: Message):
    using = int(database.get(message.from_user.id, 'using', 'user_info'))
    if using != -1:
        await message.answer(text='–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
    database.set(message.from_user.id, 'steam', 'user_info', message.text)
    await message.answer(text='—Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–º–µ–Ω –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞', reply_markup=structure.user)
    database.set_using_bot(message.from_user.id, 0)


@dp.callback_query(Text(text='hand_end'))
async def sub_sub(callback: CallbackQuery):
    using = database.get(callback.from_user.id, 'using', 'user_info')
    post = database.get(callback.from_user.id, 'post_id', 'user_info')
    if not using in [3, 4] \
            or not callback.from_user.username in admins:
        return
    database.set(post, 'end', raffle_user[using % 2 - 1], '–í—Ä—É—á–Ω—É—é')

    if using == 3:
        post = database.get_post(post, 'daily_raffle')

        text = [f'–ì–æ—Ç–æ–≤–æ:\n–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω {post[2]}', f'{post[1]}\n\n–ò—Ç–æ–≥–∏:  {post[3]}\n\n||d{post[0]}||']
        await callback.message.answer(text=text[0], reply_markup=structure.admin)
        await callback.message.answer_photo(photo=FSInputFile(path=f"daily_raffle\\{post[0]}.jpg"),
                                            caption=text[1].replace(".", "\.").replace("-", "\.").replace("|", "\|"),
                                            parse_mode='MarkdownV2',
                                            reply_markup=structure.fake_uch)
    else:
        await callback.message.answer(text="—É–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª —Å–ø–æ–Ω—Å–æ—Ä–∞ —á–µ—Ä–µ–∑ @ –∏–ª–∏ —á–µ—Ä–µ–∑ –µ–≥–æ id")
        database.set_using_bot(callback.from_user.id, 7)
    await callback.answer()


@dp.callback_query(Text(text='time_end'))
async def sub_sub(callback: CallbackQuery):
    using = database.get(callback.from_user.id, 'using', 'user_info')
    if not using in [3, 4] \
            or not callback.from_user.username in admins:
        return
    database.set_using_bot(callback.from_user.id, using + 2)
    await callback.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω–µ—Ü "dd-mm-yyyy hh:mm"')
    await callback.answer()


@dp.message()
async def handle_photo(message: Message):
    using = database.get(message.from_user.id, 'using', 'user_info')
    post = database.get(message.from_user.id, 'post_id', 'user_info')
    if message.from_user.username in admins:
        if using == 7:
            try:
                user = await bot.get_chat_member(chat_id=message.text, user_id=6189281736)
            except TelegramBadRequest:
                await message.answer(text='–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞!')
                return
            if user.status != 'administrator':
                await message.answer(text='–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞!')
                return
            database.set(post, 'channel', 'spons_raffle', message.text)
            await message.answer(text="–£–∫–∞–∂–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
            database.set_using_bot(message.from_user.id, 8)
            return
        if using == 8:
            print(message.text[1:])
            moder = database.check_moder(message.text[1:])
            print(moder)
            if not moder:
                await message.answer('–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ')
                return
            database.set(post, 'moder', 'spons_raffle', moder[0][0])
            post = database.get_post(post, 'spons_raffle')
            text = [f'–ì–æ—Ç–æ–≤–æ:\n'
                    f'–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω {post[2]}\n'
                    f'–ö–∞–Ω–∞–ª —Å–ø–æ–Ω—Å–æ—Ä–∞: {post[4]}\n'
                    f'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {post[5]}',
                    f'{post[1]}\n\n–ò—Ç–æ–≥–∏:  {post[3]}\n\n||s{post[0]}||']
            await message.answer(text=text[0], reply_markup=structure.admin)
            await message.answer_photo(photo=FSInputFile(path=f"spons_raffle\\{post[0]}.jpg"),
                                       caption=text[1].replace(".", "\.").replace("-", "\.").replace("!", "\!").replace("|", "\|"),
                                       parse_mode='MarkdownV2',
                                       reply_markup=structure.fake_uch)
            database.set_using_bot(message.from_user.id, 0)
            return
    await message.answer('–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')


if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    dp.run_polling(bot)
